//////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2005, Andrew S. Townley
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 
//     * Redistributions of source code must retain the above
//     copyright notice, this list of conditions and the following
//     disclaimer.
// 
//     * Redistributions in binary form must reproduce the above
//     copyright notice, this list of conditions and the following
//     disclaimer in the documentation and/or other materials provided
//     with the distribution.
// 
//     * Neither the names Andrew Townley and Townley Enterprises,
//     Inc. nor the names of its contributors may be used to endorse
//     or promote products derived from this software without specific
//     prior written permission.  
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
// OF THE POSSIBILITY OF SUCH DAMAGE.
//
// File:	Version.java.in
// Created:	Mon Jan  3 18:19:10 GMT 2005
//
//////////////////////////////////////////////////////////////////////

package com.townleyenterprises.libro;

import com.townleyenterprises.common.VersionHelper;
import com.townleyenterprises.common.VersionMismatchException;

/**
 * This class provides a drop-in template which may be used to provide
 * easy versioning within external projects.  It retains some of the
 * previous behavior of the
 * <code>com.townleyenterprises.common.Version</code> class, but it
 * eliminates all but the most necessary methods.
 *
 * @version $Id: Version.java.in,v 1.2 2005/01/09 11:13:30 atownley Exp $
 * @author <a href="mailto:atownley@users.sourceforge.net">Andrew S. Townley</a>
 * @since 2.1
 */

public final class Version
{
	/** this is the project to which the version refers */
	public static final String	PROJECT = "@build.version.project@";

	/** this is the major version number of the build */
	public static final int		MAJOR	= @build.version.major@;

	/** this is the minor version number of the build. */
	public static final int		MINOR	= @build.version.minor@;

	/** this is the release number of the build in question */
	public static final String	RELEASE	= "@build.version.release@";

	/** this is the sequential number of the official builds */
	public static final String	BUILD	= "@build.version.count@";

	/** this is the date on which the build was performed */
	public static final String	DATE	= "@build.version.date@";

	/** our singleton helper instance */
	private static VersionHelper	INSTANCE = new VersionHelper(PROJECT, MAJOR, MINOR, RELEASE, BUILD, DATE);

	/**
	 * This method is used to retrieve the formatted version number
	 * suitable for displaying in about boxes, version outputs, log
	 * files, etc.
	 *
	 * @return the formatted version string
	 */

	public static String getFullVersion()
	{
		return INSTANCE.getFullVersion();
	}

	/**
	 * This method is used to just get the formatted version number
	 * without the build information.
	 *
	 * @return the version string
	 */

	public static String getVersion()
	{
		return INSTANCE.getVersion();
	}

	/**
	 * This method is used to just retrieve the build portion of the
	 * version number.
	 *
	 * @return the build information
	 */

	public static String getBuild()
	{
		return INSTANCE.getBuild();
	}

	/**
	 * This is an overloaded version of require which facilitates
	 * easier version checking.
	 *
	 * @param checkver the version of the required build
	 * @exception VersionMismatchException
	 * 	if the requested version is not available
	 * @exception NumberFormatException
	 * 	if the required numeric values can't be converted to
	 * 	numbers
	 */

	public static void require(String checkver)
			throws VersionMismatchException
	{
		INSTANCE.require(checkver);
	}

	/**
	 * This version of compare deals with two version strings which
	 * are expected to be in the format provided by either {@link
	 * #getVersion} or {@link #getFullVersion}.
	 *
	 * @param verstr1 the first version string
	 * @param verstr2 the second version string
	 * @return &lt; 0 if the first is less than the second; 0 if
	 * 	they are equal or &gt; 0 if the first is greater than
	 * 	the second
	 */

	public static int compare(String verstr1, String verstr2)
	{
		return INSTANCE.compare(verstr1, verstr2);
	}

	public static void main(String[] args)
	{
		INSTANCE.printVersion();
	}

	/** prevent instantiation */
	private Version() {}
}
